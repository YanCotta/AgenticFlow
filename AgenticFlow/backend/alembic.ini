# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = database/alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date
# within the migration file as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding --install-option='--enable-zoneinfo'
# to the pip command
# timezone = UTC

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to database/alembic/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the forward slash, and those
# to be interpreted relative to the current working directory.
# version_locations = %(here)s/bar:%(here)s/bat:database/alembic/versions

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# sqlalchemy.url = driver://user:pass@localhost/dbname


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks=black
# black.type=console_scripts
# black.entrypoint=black
# black.options=-l 79

# lint with flake8
# hooks=flake8
# flake8.type=console_scripts
# flake8.entrypoint=flake8
# flake8.options=--max-line-length=79

# format using "black" with specific settings
# hooks=black
# black.type=console_scripts
# black.entrypoint=black
# black.options=--target-version py37 --line-length 79

# validate files with mypy
# hooks=mypy
# mypy.type=console_scripts
# mypy.entrypoint=mypy
# mypy.options=--strict --disallow-untyped-calls --disallow-any-generics
# mypy.allow_no_input=true

# custom template for the revision message
# hooks=revision_message
# revision_message.type=console_scripts
# revision_message.entrypoint=alembic.util.messaging
# revision_message.options=-m "%s"

# ensure the hook is run only when generating new revisions
# revision_message.run_on_missing_revision_files=False

# custom template for the revision message
# hooks=revision_message
# revision_message.type=python
# revision_message.entrypoint=my_module:my_function
# revision_message.options=--option1 --option2

# multiple hooks may be defined as long as their names are unique
# hooks=black,flake8
# black.type=console_scripts
# black.entrypoint=black
# black.options=-l 79
# flake8.type=console_scripts
# flake8.entrypoint=flake8
# flake8.options=--max-line-length=79

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
